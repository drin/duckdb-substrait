// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: substrait/extended_expression.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_substrait_2fextended_5fexpression_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_substrait_2fextended_5fexpression_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "substrait/algebra.pb.h"
#include "substrait/extensions/extensions.pb.h"
#include "substrait/plan.pb.h"
#include "substrait/type.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_substrait_2fextended_5fexpression_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_substrait_2fextended_5fexpression_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_substrait_2fextended_5fexpression_2eproto;
namespace substrait {
class ExpressionReference;
struct ExpressionReferenceDefaultTypeInternal;
extern ExpressionReferenceDefaultTypeInternal _ExpressionReference_default_instance_;
class ExtendedExpression;
struct ExtendedExpressionDefaultTypeInternal;
extern ExtendedExpressionDefaultTypeInternal _ExtendedExpression_default_instance_;
}  // namespace substrait
PROTOBUF_NAMESPACE_OPEN
template<> ::substrait::ExpressionReference* Arena::CreateMaybeMessage<::substrait::ExpressionReference>(Arena*);
template<> ::substrait::ExtendedExpression* Arena::CreateMaybeMessage<::substrait::ExtendedExpression>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace substrait {

// ===================================================================

class ExpressionReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ExpressionReference) */ {
 public:
  inline ExpressionReference() : ExpressionReference(nullptr) {}
  ~ExpressionReference() override;
  explicit constexpr ExpressionReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExpressionReference(const ExpressionReference& from);
  ExpressionReference(ExpressionReference&& from) noexcept
    : ExpressionReference() {
    *this = ::std::move(from);
  }

  inline ExpressionReference& operator=(const ExpressionReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExpressionReference& operator=(ExpressionReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExpressionReference& default_instance() {
    return *internal_default_instance();
  }
  enum ExprTypeCase {
    kExpression = 1,
    kMeasure = 2,
    EXPR_TYPE_NOT_SET = 0,
  };

  static inline const ExpressionReference* internal_default_instance() {
    return reinterpret_cast<const ExpressionReference*>(
               &_ExpressionReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ExpressionReference& a, ExpressionReference& b) {
    a.Swap(&b);
  }
  inline void Swap(ExpressionReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExpressionReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExpressionReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExpressionReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExpressionReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExpressionReference& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExpressionReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.ExpressionReference";
  }
  protected:
  explicit ExpressionReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOutputNamesFieldNumber = 3,
    kExpressionFieldNumber = 1,
    kMeasureFieldNumber = 2,
  };
  // repeated string output_names = 3;
  int output_names_size() const;
  private:
  int _internal_output_names_size() const;
  public:
  void clear_output_names();
  const std::string& output_names(int index) const;
  std::string* mutable_output_names(int index);
  void set_output_names(int index, const std::string& value);
  void set_output_names(int index, std::string&& value);
  void set_output_names(int index, const char* value);
  void set_output_names(int index, const char* value, size_t size);
  std::string* add_output_names();
  void add_output_names(const std::string& value);
  void add_output_names(std::string&& value);
  void add_output_names(const char* value);
  void add_output_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& output_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_output_names();
  private:
  const std::string& _internal_output_names(int index) const;
  std::string* _internal_add_output_names();
  public:

  // .substrait.Expression expression = 1;
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;
  public:
  void clear_expression();
  const ::substrait::Expression& expression() const;
  PROTOBUF_NODISCARD ::substrait::Expression* release_expression();
  ::substrait::Expression* mutable_expression();
  void set_allocated_expression(::substrait::Expression* expression);
  private:
  const ::substrait::Expression& _internal_expression() const;
  ::substrait::Expression* _internal_mutable_expression();
  public:
  void unsafe_arena_set_allocated_expression(
      ::substrait::Expression* expression);
  ::substrait::Expression* unsafe_arena_release_expression();

  // .substrait.AggregateFunction measure = 2;
  bool has_measure() const;
  private:
  bool _internal_has_measure() const;
  public:
  void clear_measure();
  const ::substrait::AggregateFunction& measure() const;
  PROTOBUF_NODISCARD ::substrait::AggregateFunction* release_measure();
  ::substrait::AggregateFunction* mutable_measure();
  void set_allocated_measure(::substrait::AggregateFunction* measure);
  private:
  const ::substrait::AggregateFunction& _internal_measure() const;
  ::substrait::AggregateFunction* _internal_mutable_measure();
  public:
  void unsafe_arena_set_allocated_measure(
      ::substrait::AggregateFunction* measure);
  ::substrait::AggregateFunction* unsafe_arena_release_measure();

  void clear_expr_type();
  ExprTypeCase expr_type_case() const;
  // @@protoc_insertion_point(class_scope:substrait.ExpressionReference)
 private:
  class _Internal;
  void set_has_expression();
  void set_has_measure();

  inline bool has_expr_type() const;
  inline void clear_has_expr_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> output_names_;
  union ExprTypeUnion {
    constexpr ExprTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::substrait::Expression* expression_;
    ::substrait::AggregateFunction* measure_;
  } expr_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_substrait_2fextended_5fexpression_2eproto;
};
// -------------------------------------------------------------------

class ExtendedExpression final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:substrait.ExtendedExpression) */ {
 public:
  inline ExtendedExpression() : ExtendedExpression(nullptr) {}
  ~ExtendedExpression() override;
  explicit constexpr ExtendedExpression(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtendedExpression(const ExtendedExpression& from);
  ExtendedExpression(ExtendedExpression&& from) noexcept
    : ExtendedExpression() {
    *this = ::std::move(from);
  }

  inline ExtendedExpression& operator=(const ExtendedExpression& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtendedExpression& operator=(ExtendedExpression&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtendedExpression& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtendedExpression* internal_default_instance() {
    return reinterpret_cast<const ExtendedExpression*>(
               &_ExtendedExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ExtendedExpression& a, ExtendedExpression& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtendedExpression* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtendedExpression* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtendedExpression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtendedExpression>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtendedExpression& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ExtendedExpression& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtendedExpression* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "substrait.ExtendedExpression";
  }
  protected:
  explicit ExtendedExpression(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExtensionUrisFieldNumber = 1,
    kExtensionsFieldNumber = 2,
    kReferredExprFieldNumber = 3,
    kExpectedTypeUrlsFieldNumber = 6,
    kBaseSchemaFieldNumber = 4,
    kAdvancedExtensionsFieldNumber = 5,
    kVersionFieldNumber = 7,
  };
  // repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1;
  int extension_uris_size() const;
  private:
  int _internal_extension_uris_size() const;
  public:
  void clear_extension_uris();
  ::substrait::extensions::SimpleExtensionURI* mutable_extension_uris(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionURI >*
      mutable_extension_uris();
  private:
  const ::substrait::extensions::SimpleExtensionURI& _internal_extension_uris(int index) const;
  ::substrait::extensions::SimpleExtensionURI* _internal_add_extension_uris();
  public:
  const ::substrait::extensions::SimpleExtensionURI& extension_uris(int index) const;
  ::substrait::extensions::SimpleExtensionURI* add_extension_uris();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionURI >&
      extension_uris() const;

  // repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2;
  int extensions_size() const;
  private:
  int _internal_extensions_size() const;
  public:
  void clear_extensions();
  ::substrait::extensions::SimpleExtensionDeclaration* mutable_extensions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionDeclaration >*
      mutable_extensions();
  private:
  const ::substrait::extensions::SimpleExtensionDeclaration& _internal_extensions(int index) const;
  ::substrait::extensions::SimpleExtensionDeclaration* _internal_add_extensions();
  public:
  const ::substrait::extensions::SimpleExtensionDeclaration& extensions(int index) const;
  ::substrait::extensions::SimpleExtensionDeclaration* add_extensions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionDeclaration >&
      extensions() const;

  // repeated .substrait.ExpressionReference referred_expr = 3;
  int referred_expr_size() const;
  private:
  int _internal_referred_expr_size() const;
  public:
  void clear_referred_expr();
  ::substrait::ExpressionReference* mutable_referred_expr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ExpressionReference >*
      mutable_referred_expr();
  private:
  const ::substrait::ExpressionReference& _internal_referred_expr(int index) const;
  ::substrait::ExpressionReference* _internal_add_referred_expr();
  public:
  const ::substrait::ExpressionReference& referred_expr(int index) const;
  ::substrait::ExpressionReference* add_referred_expr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ExpressionReference >&
      referred_expr() const;

  // repeated string expected_type_urls = 6;
  int expected_type_urls_size() const;
  private:
  int _internal_expected_type_urls_size() const;
  public:
  void clear_expected_type_urls();
  const std::string& expected_type_urls(int index) const;
  std::string* mutable_expected_type_urls(int index);
  void set_expected_type_urls(int index, const std::string& value);
  void set_expected_type_urls(int index, std::string&& value);
  void set_expected_type_urls(int index, const char* value);
  void set_expected_type_urls(int index, const char* value, size_t size);
  std::string* add_expected_type_urls();
  void add_expected_type_urls(const std::string& value);
  void add_expected_type_urls(std::string&& value);
  void add_expected_type_urls(const char* value);
  void add_expected_type_urls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& expected_type_urls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_expected_type_urls();
  private:
  const std::string& _internal_expected_type_urls(int index) const;
  std::string* _internal_add_expected_type_urls();
  public:

  // .substrait.NamedStruct base_schema = 4;
  bool has_base_schema() const;
  private:
  bool _internal_has_base_schema() const;
  public:
  void clear_base_schema();
  const ::substrait::NamedStruct& base_schema() const;
  PROTOBUF_NODISCARD ::substrait::NamedStruct* release_base_schema();
  ::substrait::NamedStruct* mutable_base_schema();
  void set_allocated_base_schema(::substrait::NamedStruct* base_schema);
  private:
  const ::substrait::NamedStruct& _internal_base_schema() const;
  ::substrait::NamedStruct* _internal_mutable_base_schema();
  public:
  void unsafe_arena_set_allocated_base_schema(
      ::substrait::NamedStruct* base_schema);
  ::substrait::NamedStruct* unsafe_arena_release_base_schema();

  // .substrait.extensions.AdvancedExtension advanced_extensions = 5;
  bool has_advanced_extensions() const;
  private:
  bool _internal_has_advanced_extensions() const;
  public:
  void clear_advanced_extensions();
  const ::substrait::extensions::AdvancedExtension& advanced_extensions() const;
  PROTOBUF_NODISCARD ::substrait::extensions::AdvancedExtension* release_advanced_extensions();
  ::substrait::extensions::AdvancedExtension* mutable_advanced_extensions();
  void set_allocated_advanced_extensions(::substrait::extensions::AdvancedExtension* advanced_extensions);
  private:
  const ::substrait::extensions::AdvancedExtension& _internal_advanced_extensions() const;
  ::substrait::extensions::AdvancedExtension* _internal_mutable_advanced_extensions();
  public:
  void unsafe_arena_set_allocated_advanced_extensions(
      ::substrait::extensions::AdvancedExtension* advanced_extensions);
  ::substrait::extensions::AdvancedExtension* unsafe_arena_release_advanced_extensions();

  // .substrait.Version version = 7;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::substrait::Version& version() const;
  PROTOBUF_NODISCARD ::substrait::Version* release_version();
  ::substrait::Version* mutable_version();
  void set_allocated_version(::substrait::Version* version);
  private:
  const ::substrait::Version& _internal_version() const;
  ::substrait::Version* _internal_mutable_version();
  public:
  void unsafe_arena_set_allocated_version(
      ::substrait::Version* version);
  ::substrait::Version* unsafe_arena_release_version();

  // @@protoc_insertion_point(class_scope:substrait.ExtendedExpression)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionURI > extension_uris_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionDeclaration > extensions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ExpressionReference > referred_expr_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> expected_type_urls_;
  ::substrait::NamedStruct* base_schema_;
  ::substrait::extensions::AdvancedExtension* advanced_extensions_;
  ::substrait::Version* version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_substrait_2fextended_5fexpression_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ExpressionReference

// .substrait.Expression expression = 1;
inline bool ExpressionReference::_internal_has_expression() const {
  return expr_type_case() == kExpression;
}
inline bool ExpressionReference::has_expression() const {
  return _internal_has_expression();
}
inline void ExpressionReference::set_has_expression() {
  _oneof_case_[0] = kExpression;
}
inline ::substrait::Expression* ExpressionReference::release_expression() {
  // @@protoc_insertion_point(field_release:substrait.ExpressionReference.expression)
  if (_internal_has_expression()) {
    clear_has_expr_type();
      ::substrait::Expression* temp = expr_type_.expression_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expr_type_.expression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::Expression& ExpressionReference::_internal_expression() const {
  return _internal_has_expression()
      ? *expr_type_.expression_
      : reinterpret_cast< ::substrait::Expression&>(::substrait::_Expression_default_instance_);
}
inline const ::substrait::Expression& ExpressionReference::expression() const {
  // @@protoc_insertion_point(field_get:substrait.ExpressionReference.expression)
  return _internal_expression();
}
inline ::substrait::Expression* ExpressionReference::unsafe_arena_release_expression() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ExpressionReference.expression)
  if (_internal_has_expression()) {
    clear_has_expr_type();
    ::substrait::Expression* temp = expr_type_.expression_;
    expr_type_.expression_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExpressionReference::unsafe_arena_set_allocated_expression(::substrait::Expression* expression) {
  clear_expr_type();
  if (expression) {
    set_has_expression();
    expr_type_.expression_ = expression;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExpressionReference.expression)
}
inline ::substrait::Expression* ExpressionReference::_internal_mutable_expression() {
  if (!_internal_has_expression()) {
    clear_expr_type();
    set_has_expression();
    expr_type_.expression_ = CreateMaybeMessage< ::substrait::Expression >(GetArenaForAllocation());
  }
  return expr_type_.expression_;
}
inline ::substrait::Expression* ExpressionReference::mutable_expression() {
  ::substrait::Expression* _msg = _internal_mutable_expression();
  // @@protoc_insertion_point(field_mutable:substrait.ExpressionReference.expression)
  return _msg;
}

// .substrait.AggregateFunction measure = 2;
inline bool ExpressionReference::_internal_has_measure() const {
  return expr_type_case() == kMeasure;
}
inline bool ExpressionReference::has_measure() const {
  return _internal_has_measure();
}
inline void ExpressionReference::set_has_measure() {
  _oneof_case_[0] = kMeasure;
}
inline ::substrait::AggregateFunction* ExpressionReference::release_measure() {
  // @@protoc_insertion_point(field_release:substrait.ExpressionReference.measure)
  if (_internal_has_measure()) {
    clear_has_expr_type();
      ::substrait::AggregateFunction* temp = expr_type_.measure_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    expr_type_.measure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::substrait::AggregateFunction& ExpressionReference::_internal_measure() const {
  return _internal_has_measure()
      ? *expr_type_.measure_
      : reinterpret_cast< ::substrait::AggregateFunction&>(::substrait::_AggregateFunction_default_instance_);
}
inline const ::substrait::AggregateFunction& ExpressionReference::measure() const {
  // @@protoc_insertion_point(field_get:substrait.ExpressionReference.measure)
  return _internal_measure();
}
inline ::substrait::AggregateFunction* ExpressionReference::unsafe_arena_release_measure() {
  // @@protoc_insertion_point(field_unsafe_arena_release:substrait.ExpressionReference.measure)
  if (_internal_has_measure()) {
    clear_has_expr_type();
    ::substrait::AggregateFunction* temp = expr_type_.measure_;
    expr_type_.measure_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExpressionReference::unsafe_arena_set_allocated_measure(::substrait::AggregateFunction* measure) {
  clear_expr_type();
  if (measure) {
    set_has_measure();
    expr_type_.measure_ = measure;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExpressionReference.measure)
}
inline ::substrait::AggregateFunction* ExpressionReference::_internal_mutable_measure() {
  if (!_internal_has_measure()) {
    clear_expr_type();
    set_has_measure();
    expr_type_.measure_ = CreateMaybeMessage< ::substrait::AggregateFunction >(GetArenaForAllocation());
  }
  return expr_type_.measure_;
}
inline ::substrait::AggregateFunction* ExpressionReference::mutable_measure() {
  ::substrait::AggregateFunction* _msg = _internal_mutable_measure();
  // @@protoc_insertion_point(field_mutable:substrait.ExpressionReference.measure)
  return _msg;
}

// repeated string output_names = 3;
inline int ExpressionReference::_internal_output_names_size() const {
  return output_names_.size();
}
inline int ExpressionReference::output_names_size() const {
  return _internal_output_names_size();
}
inline void ExpressionReference::clear_output_names() {
  output_names_.Clear();
}
inline std::string* ExpressionReference::add_output_names() {
  std::string* _s = _internal_add_output_names();
  // @@protoc_insertion_point(field_add_mutable:substrait.ExpressionReference.output_names)
  return _s;
}
inline const std::string& ExpressionReference::_internal_output_names(int index) const {
  return output_names_.Get(index);
}
inline const std::string& ExpressionReference::output_names(int index) const {
  // @@protoc_insertion_point(field_get:substrait.ExpressionReference.output_names)
  return _internal_output_names(index);
}
inline std::string* ExpressionReference::mutable_output_names(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.ExpressionReference.output_names)
  return output_names_.Mutable(index);
}
inline void ExpressionReference::set_output_names(int index, const std::string& value) {
  output_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait.ExpressionReference.output_names)
}
inline void ExpressionReference::set_output_names(int index, std::string&& value) {
  output_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait.ExpressionReference.output_names)
}
inline void ExpressionReference::set_output_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.ExpressionReference.output_names)
}
inline void ExpressionReference::set_output_names(int index, const char* value, size_t size) {
  output_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.ExpressionReference.output_names)
}
inline std::string* ExpressionReference::_internal_add_output_names() {
  return output_names_.Add();
}
inline void ExpressionReference::add_output_names(const std::string& value) {
  output_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.ExpressionReference.output_names)
}
inline void ExpressionReference::add_output_names(std::string&& value) {
  output_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.ExpressionReference.output_names)
}
inline void ExpressionReference::add_output_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  output_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.ExpressionReference.output_names)
}
inline void ExpressionReference::add_output_names(const char* value, size_t size) {
  output_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.ExpressionReference.output_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExpressionReference::output_names() const {
  // @@protoc_insertion_point(field_list:substrait.ExpressionReference.output_names)
  return output_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExpressionReference::mutable_output_names() {
  // @@protoc_insertion_point(field_mutable_list:substrait.ExpressionReference.output_names)
  return &output_names_;
}

inline bool ExpressionReference::has_expr_type() const {
  return expr_type_case() != EXPR_TYPE_NOT_SET;
}
inline void ExpressionReference::clear_has_expr_type() {
  _oneof_case_[0] = EXPR_TYPE_NOT_SET;
}
inline ExpressionReference::ExprTypeCase ExpressionReference::expr_type_case() const {
  return ExpressionReference::ExprTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ExtendedExpression

// .substrait.Version version = 7;
inline bool ExtendedExpression::_internal_has_version() const {
  return this != internal_default_instance() && version_ != nullptr;
}
inline bool ExtendedExpression::has_version() const {
  return _internal_has_version();
}
inline const ::substrait::Version& ExtendedExpression::_internal_version() const {
  const ::substrait::Version* p = version_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::Version&>(
      ::substrait::_Version_default_instance_);
}
inline const ::substrait::Version& ExtendedExpression::version() const {
  // @@protoc_insertion_point(field_get:substrait.ExtendedExpression.version)
  return _internal_version();
}
inline void ExtendedExpression::unsafe_arena_set_allocated_version(
    ::substrait::Version* version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExtendedExpression.version)
}
inline ::substrait::Version* ExtendedExpression::release_version() {
  
  ::substrait::Version* temp = version_;
  version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::Version* ExtendedExpression::unsafe_arena_release_version() {
  // @@protoc_insertion_point(field_release:substrait.ExtendedExpression.version)
  
  ::substrait::Version* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::substrait::Version* ExtendedExpression::_internal_mutable_version() {
  
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::Version>(GetArenaForAllocation());
    version_ = p;
  }
  return version_;
}
inline ::substrait::Version* ExtendedExpression::mutable_version() {
  ::substrait::Version* _msg = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:substrait.ExtendedExpression.version)
  return _msg;
}
inline void ExtendedExpression::set_allocated_version(::substrait::Version* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(version));
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    
  } else {
    
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExtendedExpression.version)
}

// repeated .substrait.extensions.SimpleExtensionURI extension_uris = 1;
inline int ExtendedExpression::_internal_extension_uris_size() const {
  return extension_uris_.size();
}
inline int ExtendedExpression::extension_uris_size() const {
  return _internal_extension_uris_size();
}
inline ::substrait::extensions::SimpleExtensionURI* ExtendedExpression::mutable_extension_uris(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.ExtendedExpression.extension_uris)
  return extension_uris_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionURI >*
ExtendedExpression::mutable_extension_uris() {
  // @@protoc_insertion_point(field_mutable_list:substrait.ExtendedExpression.extension_uris)
  return &extension_uris_;
}
inline const ::substrait::extensions::SimpleExtensionURI& ExtendedExpression::_internal_extension_uris(int index) const {
  return extension_uris_.Get(index);
}
inline const ::substrait::extensions::SimpleExtensionURI& ExtendedExpression::extension_uris(int index) const {
  // @@protoc_insertion_point(field_get:substrait.ExtendedExpression.extension_uris)
  return _internal_extension_uris(index);
}
inline ::substrait::extensions::SimpleExtensionURI* ExtendedExpression::_internal_add_extension_uris() {
  return extension_uris_.Add();
}
inline ::substrait::extensions::SimpleExtensionURI* ExtendedExpression::add_extension_uris() {
  ::substrait::extensions::SimpleExtensionURI* _add = _internal_add_extension_uris();
  // @@protoc_insertion_point(field_add:substrait.ExtendedExpression.extension_uris)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionURI >&
ExtendedExpression::extension_uris() const {
  // @@protoc_insertion_point(field_list:substrait.ExtendedExpression.extension_uris)
  return extension_uris_;
}

// repeated .substrait.extensions.SimpleExtensionDeclaration extensions = 2;
inline int ExtendedExpression::_internal_extensions_size() const {
  return extensions_.size();
}
inline int ExtendedExpression::extensions_size() const {
  return _internal_extensions_size();
}
inline ::substrait::extensions::SimpleExtensionDeclaration* ExtendedExpression::mutable_extensions(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.ExtendedExpression.extensions)
  return extensions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionDeclaration >*
ExtendedExpression::mutable_extensions() {
  // @@protoc_insertion_point(field_mutable_list:substrait.ExtendedExpression.extensions)
  return &extensions_;
}
inline const ::substrait::extensions::SimpleExtensionDeclaration& ExtendedExpression::_internal_extensions(int index) const {
  return extensions_.Get(index);
}
inline const ::substrait::extensions::SimpleExtensionDeclaration& ExtendedExpression::extensions(int index) const {
  // @@protoc_insertion_point(field_get:substrait.ExtendedExpression.extensions)
  return _internal_extensions(index);
}
inline ::substrait::extensions::SimpleExtensionDeclaration* ExtendedExpression::_internal_add_extensions() {
  return extensions_.Add();
}
inline ::substrait::extensions::SimpleExtensionDeclaration* ExtendedExpression::add_extensions() {
  ::substrait::extensions::SimpleExtensionDeclaration* _add = _internal_add_extensions();
  // @@protoc_insertion_point(field_add:substrait.ExtendedExpression.extensions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::extensions::SimpleExtensionDeclaration >&
ExtendedExpression::extensions() const {
  // @@protoc_insertion_point(field_list:substrait.ExtendedExpression.extensions)
  return extensions_;
}

// repeated .substrait.ExpressionReference referred_expr = 3;
inline int ExtendedExpression::_internal_referred_expr_size() const {
  return referred_expr_.size();
}
inline int ExtendedExpression::referred_expr_size() const {
  return _internal_referred_expr_size();
}
inline void ExtendedExpression::clear_referred_expr() {
  referred_expr_.Clear();
}
inline ::substrait::ExpressionReference* ExtendedExpression::mutable_referred_expr(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.ExtendedExpression.referred_expr)
  return referred_expr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ExpressionReference >*
ExtendedExpression::mutable_referred_expr() {
  // @@protoc_insertion_point(field_mutable_list:substrait.ExtendedExpression.referred_expr)
  return &referred_expr_;
}
inline const ::substrait::ExpressionReference& ExtendedExpression::_internal_referred_expr(int index) const {
  return referred_expr_.Get(index);
}
inline const ::substrait::ExpressionReference& ExtendedExpression::referred_expr(int index) const {
  // @@protoc_insertion_point(field_get:substrait.ExtendedExpression.referred_expr)
  return _internal_referred_expr(index);
}
inline ::substrait::ExpressionReference* ExtendedExpression::_internal_add_referred_expr() {
  return referred_expr_.Add();
}
inline ::substrait::ExpressionReference* ExtendedExpression::add_referred_expr() {
  ::substrait::ExpressionReference* _add = _internal_add_referred_expr();
  // @@protoc_insertion_point(field_add:substrait.ExtendedExpression.referred_expr)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::substrait::ExpressionReference >&
ExtendedExpression::referred_expr() const {
  // @@protoc_insertion_point(field_list:substrait.ExtendedExpression.referred_expr)
  return referred_expr_;
}

// .substrait.NamedStruct base_schema = 4;
inline bool ExtendedExpression::_internal_has_base_schema() const {
  return this != internal_default_instance() && base_schema_ != nullptr;
}
inline bool ExtendedExpression::has_base_schema() const {
  return _internal_has_base_schema();
}
inline const ::substrait::NamedStruct& ExtendedExpression::_internal_base_schema() const {
  const ::substrait::NamedStruct* p = base_schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::NamedStruct&>(
      ::substrait::_NamedStruct_default_instance_);
}
inline const ::substrait::NamedStruct& ExtendedExpression::base_schema() const {
  // @@protoc_insertion_point(field_get:substrait.ExtendedExpression.base_schema)
  return _internal_base_schema();
}
inline void ExtendedExpression::unsafe_arena_set_allocated_base_schema(
    ::substrait::NamedStruct* base_schema) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_schema_);
  }
  base_schema_ = base_schema;
  if (base_schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExtendedExpression.base_schema)
}
inline ::substrait::NamedStruct* ExtendedExpression::release_base_schema() {
  
  ::substrait::NamedStruct* temp = base_schema_;
  base_schema_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::NamedStruct* ExtendedExpression::unsafe_arena_release_base_schema() {
  // @@protoc_insertion_point(field_release:substrait.ExtendedExpression.base_schema)
  
  ::substrait::NamedStruct* temp = base_schema_;
  base_schema_ = nullptr;
  return temp;
}
inline ::substrait::NamedStruct* ExtendedExpression::_internal_mutable_base_schema() {
  
  if (base_schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::NamedStruct>(GetArenaForAllocation());
    base_schema_ = p;
  }
  return base_schema_;
}
inline ::substrait::NamedStruct* ExtendedExpression::mutable_base_schema() {
  ::substrait::NamedStruct* _msg = _internal_mutable_base_schema();
  // @@protoc_insertion_point(field_mutable:substrait.ExtendedExpression.base_schema)
  return _msg;
}
inline void ExtendedExpression::set_allocated_base_schema(::substrait::NamedStruct* base_schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_schema_);
  }
  if (base_schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_schema));
    if (message_arena != submessage_arena) {
      base_schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_schema, submessage_arena);
    }
    
  } else {
    
  }
  base_schema_ = base_schema;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExtendedExpression.base_schema)
}

// .substrait.extensions.AdvancedExtension advanced_extensions = 5;
inline bool ExtendedExpression::_internal_has_advanced_extensions() const {
  return this != internal_default_instance() && advanced_extensions_ != nullptr;
}
inline bool ExtendedExpression::has_advanced_extensions() const {
  return _internal_has_advanced_extensions();
}
inline const ::substrait::extensions::AdvancedExtension& ExtendedExpression::_internal_advanced_extensions() const {
  const ::substrait::extensions::AdvancedExtension* p = advanced_extensions_;
  return p != nullptr ? *p : reinterpret_cast<const ::substrait::extensions::AdvancedExtension&>(
      ::substrait::extensions::_AdvancedExtension_default_instance_);
}
inline const ::substrait::extensions::AdvancedExtension& ExtendedExpression::advanced_extensions() const {
  // @@protoc_insertion_point(field_get:substrait.ExtendedExpression.advanced_extensions)
  return _internal_advanced_extensions();
}
inline void ExtendedExpression::unsafe_arena_set_allocated_advanced_extensions(
    ::substrait::extensions::AdvancedExtension* advanced_extensions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extensions_);
  }
  advanced_extensions_ = advanced_extensions;
  if (advanced_extensions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:substrait.ExtendedExpression.advanced_extensions)
}
inline ::substrait::extensions::AdvancedExtension* ExtendedExpression::release_advanced_extensions() {
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extensions_;
  advanced_extensions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ExtendedExpression::unsafe_arena_release_advanced_extensions() {
  // @@protoc_insertion_point(field_release:substrait.ExtendedExpression.advanced_extensions)
  
  ::substrait::extensions::AdvancedExtension* temp = advanced_extensions_;
  advanced_extensions_ = nullptr;
  return temp;
}
inline ::substrait::extensions::AdvancedExtension* ExtendedExpression::_internal_mutable_advanced_extensions() {
  
  if (advanced_extensions_ == nullptr) {
    auto* p = CreateMaybeMessage<::substrait::extensions::AdvancedExtension>(GetArenaForAllocation());
    advanced_extensions_ = p;
  }
  return advanced_extensions_;
}
inline ::substrait::extensions::AdvancedExtension* ExtendedExpression::mutable_advanced_extensions() {
  ::substrait::extensions::AdvancedExtension* _msg = _internal_mutable_advanced_extensions();
  // @@protoc_insertion_point(field_mutable:substrait.ExtendedExpression.advanced_extensions)
  return _msg;
}
inline void ExtendedExpression::set_allocated_advanced_extensions(::substrait::extensions::AdvancedExtension* advanced_extensions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extensions_);
  }
  if (advanced_extensions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(advanced_extensions));
    if (message_arena != submessage_arena) {
      advanced_extensions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, advanced_extensions, submessage_arena);
    }
    
  } else {
    
  }
  advanced_extensions_ = advanced_extensions;
  // @@protoc_insertion_point(field_set_allocated:substrait.ExtendedExpression.advanced_extensions)
}

// repeated string expected_type_urls = 6;
inline int ExtendedExpression::_internal_expected_type_urls_size() const {
  return expected_type_urls_.size();
}
inline int ExtendedExpression::expected_type_urls_size() const {
  return _internal_expected_type_urls_size();
}
inline void ExtendedExpression::clear_expected_type_urls() {
  expected_type_urls_.Clear();
}
inline std::string* ExtendedExpression::add_expected_type_urls() {
  std::string* _s = _internal_add_expected_type_urls();
  // @@protoc_insertion_point(field_add_mutable:substrait.ExtendedExpression.expected_type_urls)
  return _s;
}
inline const std::string& ExtendedExpression::_internal_expected_type_urls(int index) const {
  return expected_type_urls_.Get(index);
}
inline const std::string& ExtendedExpression::expected_type_urls(int index) const {
  // @@protoc_insertion_point(field_get:substrait.ExtendedExpression.expected_type_urls)
  return _internal_expected_type_urls(index);
}
inline std::string* ExtendedExpression::mutable_expected_type_urls(int index) {
  // @@protoc_insertion_point(field_mutable:substrait.ExtendedExpression.expected_type_urls)
  return expected_type_urls_.Mutable(index);
}
inline void ExtendedExpression::set_expected_type_urls(int index, const std::string& value) {
  expected_type_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:substrait.ExtendedExpression.expected_type_urls)
}
inline void ExtendedExpression::set_expected_type_urls(int index, std::string&& value) {
  expected_type_urls_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:substrait.ExtendedExpression.expected_type_urls)
}
inline void ExtendedExpression::set_expected_type_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  expected_type_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:substrait.ExtendedExpression.expected_type_urls)
}
inline void ExtendedExpression::set_expected_type_urls(int index, const char* value, size_t size) {
  expected_type_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:substrait.ExtendedExpression.expected_type_urls)
}
inline std::string* ExtendedExpression::_internal_add_expected_type_urls() {
  return expected_type_urls_.Add();
}
inline void ExtendedExpression::add_expected_type_urls(const std::string& value) {
  expected_type_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:substrait.ExtendedExpression.expected_type_urls)
}
inline void ExtendedExpression::add_expected_type_urls(std::string&& value) {
  expected_type_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:substrait.ExtendedExpression.expected_type_urls)
}
inline void ExtendedExpression::add_expected_type_urls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  expected_type_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:substrait.ExtendedExpression.expected_type_urls)
}
inline void ExtendedExpression::add_expected_type_urls(const char* value, size_t size) {
  expected_type_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:substrait.ExtendedExpression.expected_type_urls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExtendedExpression::expected_type_urls() const {
  // @@protoc_insertion_point(field_list:substrait.ExtendedExpression.expected_type_urls)
  return expected_type_urls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExtendedExpression::mutable_expected_type_urls() {
  // @@protoc_insertion_point(field_mutable_list:substrait.ExtendedExpression.expected_type_urls)
  return &expected_type_urls_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace substrait

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_substrait_2fextended_5fexpression_2eproto
